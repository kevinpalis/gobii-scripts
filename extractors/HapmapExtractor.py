#!/usr/bin/env python
# encoding: utf-8
'''
edu.cornell.gobii.HapmapExtractor -- shortdesc

edu.cornell.gobii.HapmapExtractor is a description

It defines classes_and_methods

@author:     yn259

@copyright:  2016 Cornell University. All rights reserved.

@license:    license

@contact:    yn259@cornell.edu
@deffield    updated: Updated
'''

import sys
import os
import pandas as pd
import numpy as np

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2016-07-05'
__updated__ = '2016-07-05'

DEBUG = 1
TESTRUN = 0
PROFILE = 0


def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2016 yn259 (Cornell University)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-p", "--project", dest="projfile", action="store", help="set project input path", metavar="FILE")
        parser.add_option("-s", "--sample", dest="samplefile", action="store", help="set sample input path", metavar="FILE")
        parser.add_option("-k", "--marker", dest="markerfile", action="store", help="set marker input path", metavar="FILE")
        parser.add_option("-m", "--matrix", dest="matrixfile", action="store", help="set matrix input path", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", action="store", help="set output path", metavar="FILE")
#         parser.add_option("-h", "--help", dest="help", action="help")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(outfile="./out.txt", infile="./in.txt")

        # process options
        (opts, args) = parser.parse_args(argv)

        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)

        # MAIN BODY #
        print('loading sample file...')
        sampledata = pd.read_table(opts.samplefile, header=None, dtype='string')
        print('transposing sample data...')
        t_sample = sampledata.transpose();
        s_rows = [None] * len(t_sample)
        print('loading marker file...')
        markerdata = pd.read_table(opts.markerfile, header=None, dtype='string')
        columns=['assembly#', 'center', 'protLSID', 'assayLSID', 'panelLSID', 'QCcode']
        df_columns = pd.DataFrame(columns)
        marker_extra = pd.DataFrame(np.NaN, index=['NaN'] * (len(markerdata)-1), columns=columns)
        marker_extra = pd.DataFrame(marker_extra.values)
        marker_extra = pd.concat([df_columns.transpose(), marker_extra], ignore_index=True)
        markerdata = pd.concat([markerdata, marker_extra], axis=1, ignore_index=True)
        print('creating empty dataframes...')
        df_empty = pd.DataFrame(np.NaN, index=s_rows, columns=range(len(markerdata.columns)-1))
        df_empty = pd.DataFrame(df_empty.values)
        print('concatenating df_empty with samples...')
        sampledata = pd.concat([df_empty, t_sample], axis=1, ignore_index=True)
        
        print('loading matrix file')
        matrixdata = pd.read_table(opts.matrixfile, header=None, dtype='string')
        print('concatenating markers with matrix...')
        df_empty_matrix = pd.DataFrame(np.NaN, index=[None] * 1, columns=range(len(matrixdata.columns)))
        matrixdata = pd.concat([df_empty_matrix, matrixdata], axis=0, ignore_index=True)
        matrixdata = pd.concat([markerdata, matrixdata], axis=1, ignore_index=True)
        print('concatenating samples with matrix...')
        df_data = pd.concat([sampledata,  matrixdata])
        print('writing hapmap to file')
        df_data.to_csv(opts.outfile, header=None, index=None, sep="\t", na_rep='', mode='w', line_terminator='\n')
        return 0;

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

if __name__ == "__main__":
#     if DEBUG:
#         sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'edu.cornell.gobii.HapmapExtractor_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())